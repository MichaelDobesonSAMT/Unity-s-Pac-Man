@startuml
hide circle
skinparam defaultFontName Monospaced
skinparam monochrome true
skinparam classAttributeIconSize 0


	class Game {
		<u>-MARGIN : int = 110
		<u>-BLINKY_FROM_PAC : int = 10
		<u>-PAC_AURA_DISTANCE : int = 2
		
		-gridSize : int = 20
		-wallPercent : double = 0.3
		-blinkySpeed : int = 500
		-livesGained : int = 3
		-superPelletPercent : double = 0.25
		-superPelletDuration : int = 10000
		
		+nLives : int = livesGained
		+pellets : int = 0
		+nPoints : int = 0
		+nHighscore : int
		+pacmanX : int = 0
		+pacmanY : int = 0
		+blinkyX : int
		+blinkyY : int
		+grid : int[]
		+inverseGrid : int[]
		+gridWalls : bool[]
		+isPaused : bool
		+isScared : bool
		+isBlinkyEaten : bool	
		
		~Start() : void
		~Update() : void
		+setDefault() : void
		+setWalls() : void
		+getGrid() : void
		+getInverseGrid() : void
		+placeAura(int[],int,int) : void
		+placeObjects() : void
		+visit(int[],int,int,int) : void
		+placePellet(int,int) : void
		+placeSuperPellet(int,int) : void
		+placeWall(int,int) : void
		+getGridX(int) : void
		+getGridY(int) : void
		+resetPlayfield() : void
		+youRetry() : void
		+youWin() : void
		+youLose() : void
		+youPause() : void
		+setHighscore() : void
	}
	
	
	class Player {
		~Start() : void
		~Update() : void
		+checkPacEatPellet() : void
		+checkPacEatSuperPellet() : void
		+checkPacInPlayField() : void
		+checkBlinkyInPlayField() : void
		+checkPacDontTouchWall(int,int) : void
		+checkBlinkyDontTouchWall(int,int) : void
		+resetPacman() : void
		+youEatGhost() : void
	}
	
	class Blinky {
		~Start() : void
		~Update() : void
		+autoMoveBlinky() : void
		+moveBlinky(int,int) : void
		+notScaredBlinky() : void
	}
		
	Game<--Player
	Game<--Blinky
	

@enduml